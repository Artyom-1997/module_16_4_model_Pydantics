from fastapi import FastAPI, HTTPException
from pydantic import BaseModel, constr, conint
from typing import List, Optional

app = FastAPI()

# Модель пользователя
class User(BaseModel):
    id: int
    username: constr(min_length=1)  # Имя пользователя, не может быть пустым
    age: conint(ge=0, le=120)        # Возраст должен быть от 0 до 120

# Изначальный список пользователей
users: List[User] = []


@app.get("/users", response_model=List[User])
async def get_users() -> List[User]:
    """Возвращает список пользователей."""
    return users


@app.post("/user/{username}/{age}", response_model=User)
async def create_user(username: str, age: int) -> User:
    """Добавляет нового пользователя в список."""
    if age < 0 or age > 120:
        raise HTTPException(status_code=400, detail="Age must be between 0 and 120.")

    new_user_id = (users[-1].id + 1) if users else 1
    new_user = User(id=new_user_id, username=username, age=age)
    users.append(new_user)
    return new_user


@app.put("/user/{user_id}/{username}/{age}", response_model=User)
async def update_user(user_id: int, username: str, age: int) -> User:
    """Обновляет существующего пользователя по указанному ID."""
    if age < 0 or age > 120:
        raise HTTPException(status_code=400, detail="Age must be between 0 and 120.")

    for user in users:
        if user.id == user_id:
            user.username = username
            user.age = age
            return user
    raise HTTPException(status_code=404, detail="User was not found")


@app.delete("/user/{user_id}", response_model=User)
async def delete_user(user_id: int) -> User:
    """Удаляет пользователя по указанному ID."""
    for user in users:
        if user.id == user_id:
            users.remove(user)
            return user
    raise HTTPException(status_code=404, detail="User was not found")

# Запуск приложения
# uvicorn main:app --reload